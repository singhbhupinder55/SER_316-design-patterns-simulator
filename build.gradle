plugins {
    id 'java' // Java plugin
    id 'application' // Application plugin for running Java apps
    id 'checkstyle' // Static code analysis with Checkstyle
    id 'com.github.spotbugs' version '5.0.13' // Static bug analysis with SpotBugs
    id 'jacoco'
}


group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral() // Use Maven Central for dependencies
}

dependencies {
    // JUnit 5 for testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainClass = 'siliconvalleysimulator.Main' // Specify your main class with its package
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}

///////////////////////////////////////////////////////////////////////
// Configure JaCoCo for Code Coverage
///////////////////////////////////////////////////////////////////////
jacocoTestReport {
    reports {
        xml.required.set(false) // Disable XML report
        csv.required.set(false) // Disable CSV report
        html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml')) // Enable HTML report
    }
}

///////////////////////////////////////////////////////////////////////
// Configure Checkstyle for Static Code Analysis
///////////////////////////////////////////////////////////////////////
checkstyle {
    ignoreFailures = true // Don't fail the build for Checkstyle violations
    showViolations = false // Suppress violations in the console
    toolVersion = "8.8" // Specify Checkstyle version
}

tasks.withType(Checkstyle).configureEach {
    reports {
        html.required.set(true) // Enable HTML report
        xml.required.set(false) // Disable XML report
    }
}

///////////////////////////////////////////////////////////////////////
// Configure SpotBugs for Static Bug Analysis
///////////////////////////////////////////////////////////////////////
spotbugs {
    ignoreFailures = true // Don't fail the build for SpotBugs warnings
    showProgress = true // Show progress during analysis
    effort = 'max' // Set the analysis effort level to maximum
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        xml.required.set(false) // Disable XML report
        html.required.set(true) // Enable HTML report
    }
}

///////////////////////////////////////////////////////////////////////
// Task Configuration
///////////////////////////////////////////////////////////////////////
// Ensure 'check' task runs SpotBugs and Checkstyle
tasks.check {
    dependsOn tasks.withType(com.github.spotbugs.snom.SpotBugsTask)
    dependsOn tasks.withType(Checkstyle)
}

tasks.named('test') {
    useJUnitPlatform() // Enable JUnit 5 platform for tests
}

jacoco {
    toolVersion = "0.8.8"  // Or whatever the latest Jacoco version is
}

// Ensure static analysis is part of the build process
tasks.named('build') {
    dependsOn tasks.withType(Checkstyle)
    dependsOn tasks.withType(com.github.spotbugs.snom.SpotBugsTask)
    dependsOn jacocoTestReport // Add JaCoCo to the build process
}

